import React, { useState } from 'react';
import axios from 'axios';
//import './App.css'; // Make sure you have App.css for basic styling

// Define interfaces for data structures
interface Menu {
  id: number;
  restaurant_id: number;
  name: string;
  description: string;
  base_price: string; // Expected as string (Decimal from Python)
  category: string;
  image_url: string | null;
  is_available: boolean;
  created_at: string; // ISO 8601 string
  updated_at: string; // ISO 8601 string
}

interface Order {
  id: number; // Matches 'id' column in DB
  restaurant_id: number;
  table_number: number;
  total_amount: string;
  status: string;
  payment_status: string;
  order_time: string; // ISO 8601 string
  updated_at: string;
  qr_code_url: string | null;
}

interface OrderItem { // Interface for Order Items
  id?: number; // Optional, as it's generated by DB
  order_id?: number; // Optional, as it's linked by backend
  menu_id: number;
  quantity: number;
  price_at_order: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

interface Employee {
  id: number; // Matches 'id' column in DB
  full_name: string;
  position: string;
  phone_number: string;
  salary: string; // As string because of Decimal in Python
  hire_date: string;
  created_at: string;
  updated_at: string;
  restaurant_id: number; // restaurant_id for Employee data
}

const App: React.FC = () => {
  const [menus, setMenus] = useState<Menu[] | null>(null);
  const [orders, setOrders] = useState<Order[] | null>(null);
  const [employees, setEmployees] = useState<Employee[] | null>(null);
  const [selectedRestaurantId, setSelectedRestaurantId] = useState<number | null>(1); // Default to ID 1 or desired value
  const [testApiMessage, setTestApiMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [currentDisplay, setCurrentDisplay] = useState<'none' | 'menus' | 'testApi' | 'orders' | 'employees' | 'createOrder'>('none');

  // State for new Order form (adjusted to 'orders' table schema)
  const [newOrderTableNumber, setNewOrderTableNumber] = useState<string>('');
  const [newOrderTotalAmount, setNewOrderTotalAmount] = useState<string>('');
  const [newOrderStatus, setNewOrderStatus] = useState<string>('Pending');
  const [newOrderPaymentStatus, setNewOrderPaymentStatus] = useState<string>('Pending');
  const [createOrderMessage, setCreateOrderMessage] = useState<string | null>(null);

  // State for items in the new Order
  const [newOrderItems, setNewOrderItems] = useState<OrderItem[]>([]);
  const [currentMenuItemId, setCurrentMenuItemId] = useState<string>('');
  const [currentQuantity, setCurrentQuantity] = useState<string>('');
  const [currentPriceAtOrder, setCurrentPriceAtOrder] = useState<string>('');
  const [currentNotes, setCurrentNotes] = useState<string>('');


  // Function to handle Restaurant ID input change
  const handleRestaurantIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    const id = value === '' ? null : parseInt(value, 10);
    setSelectedRestaurantId(id);
    // Clear old data when changing restaurant
    setMenus(null);
    setOrders(null);
    setEmployees(null);
    setTestApiMessage(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('none');
    setError(null);
  };

  // Function to fetch menu data from Backend (with restaurantId)
  const fetchMenus = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("Please enter a valid Restaurant ID first.");
      return;
    }
    setLoading(true);
    setError(null);
    setMenus(null);
    setOrders(null);
    setEmployees(null);
    setTestApiMessage(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('menus');

    try {
      // Send restaurant_id as query parameter
      const response = await axios.get<Menu[]>(`http://localhost:5000/api/menus?restaurant_id=${selectedRestaurantId}`);
      setMenus(response.data);
    } catch (err: any) { // Handle errors
      console.error("Error fetching menus:", err);
      setError("Failed to fetch menus. Please check the backend (port 5000) and your database connection.");
    } finally {
      setLoading(false);
    }
  };

  // Function to fetch Orders data from Backend (with restaurantId)
  const fetchOrders = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("Please enter a valid Restaurant ID first.");
      return;
    }
    setLoading(true);
    setError(null);
    setMenus(null);
    setOrders(null);
    setEmployees(null);
    setTestApiMessage(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('orders');

    try {
      const response = await axios.get<Order[]>(`http://localhost:5000/api/orders?restaurant_id=${selectedRestaurantId}`);
      setOrders(response.data);
    } catch (err: any) {
      console.error("Error fetching orders:", err);
      setError("Failed to fetch Orders. Please check the backend (port 5000) and your '/api/orders' API.");
    } finally {
      setLoading(false);
    }
  };

  // Function to fetch Employees data from Backend (with restaurantId)
  const fetchEmployees = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("Please enter a valid Restaurant ID first.");
      return;
    }
    setLoading(true);
    setError(null);
    setMenus(null);
    setOrders(null);
    setEmployees(null);
    setTestApiMessage(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('employees');

    try {
      const response = await axios.get<Employee[]>(`http://localhost:5000/api/employees?restaurant_id=${selectedRestaurantId}`);
      setEmployees(response.data);
    } catch (err: any) {
      console.error("Error fetching employees:", err);
      setError("Failed to fetch Employees. Please check the backend (port 5000) and your '/api/employees' API.");
    } finally {
      setLoading(false);
    }
  };

  // Function to call general test API (does not require restaurantId)
  const callTestApi = async () => {
    setLoading(true);
    setError(null);
    setMenus(null);
    setOrders(null);
    setEmployees(null);
    setTestApiMessage(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('testApi');

    try {
      const response = await axios.get<{ message: string; data: string }>('http://localhost:5000/api/test');
      setTestApiMessage(response.data.message + " - " + response.data.data);
    } catch (err: any) {
      console.error("Error calling test API:", err);
      setError("Failed to call test API. Ensure backend is running.");
    } finally {
      setLoading(false);
    }
  };

  // Function to add an order item to the new order list
  const addOrderItem = () => {
    // Basic validation for order item
    if (!currentMenuItemId || !currentQuantity || !currentPriceAtOrder) {
      alert("Please enter Menu ID, Quantity, and Price At Order for the item.");
      return;
    }

    const newItem: OrderItem = {
      menu_id: parseInt(currentMenuItemId, 10),
      quantity: parseInt(currentQuantity, 10),
      price_at_order: parseFloat(currentPriceAtOrder),
      notes: currentNotes || undefined, // Allow notes to be optional
    };

    setNewOrderItems([...newOrderItems, newItem]);
    // Clear current item fields for next entry
    setCurrentMenuItemId('');
    setCurrentQuantity('');
    setCurrentPriceAtOrder('');
    setCurrentNotes('');
    setError(null); // Clear any previous error
  };

  // Function to create a new Order (sends restaurant_id, table_number, payment_status, and items)
  const createOrder = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("Please enter a valid Restaurant ID first.");
      return;
    }
    setLoading(true);
    setError(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('createOrder'); // Ensure form is visible

    // Validate main Order data
    if (!newOrderTableNumber || !newOrderTotalAmount || !newOrderStatus || !newOrderPaymentStatus) {
      setError("Please fill in all main Order details.");
      setLoading(false);
      return;
    }
    // Validate if there are items in the order
    if (newOrderItems.length === 0) {
      setError("Please add at least one item to the Order.");
      setLoading(false);
      return;
    }


    try {
      const response = await axios.post('http://localhost:5000/api/orders', {
        restaurant_id: selectedRestaurantId,
        table_number: parseInt(newOrderTableNumber, 10),
        total_amount: parseFloat(newOrderTotalAmount),
        status: newOrderStatus,
        payment_status: newOrderPaymentStatus,
        items: newOrderItems, // Send items list
      });
      setCreateOrderMessage(`Order created successfully! ID: ${response.data.order_id}`);
      // Clear main Order form fields
      setNewOrderTableNumber('');
      setNewOrderTotalAmount('');
      setNewOrderStatus('Pending');
      setNewOrderPaymentStatus('Pending');
      setNewOrderItems([]); // Clear added items

      // Fetch Orders to update the list automatically (for the selected restaurant)
      fetchOrders();
    } catch (err: any) {
      console.error("Error creating order:", err);
      setError(`Failed to create Order: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="App" style={appContainerStyle}>
      <header style={headerStyle}>
        <h1>Backend API Test Panel</h1>
        <p>ทดสอบการเชื่อมต่อ Backend (Flask) และดึงข้อมูลจากฐานข้อมูล</p>
      </header>

      <div style={dropdownContainerStyle}>
        <label htmlFor="restaurant-id-input" style={labelStyle}>ป้อน Restaurant ID:</label>
        <input
          type="number"
          id="restaurant-id-input"
          value={selectedRestaurantId === null ? '' : selectedRestaurantId}
          onChange={handleRestaurantIdChange}
          style={inputStyle}
          placeholder="เช่น 1, 2, 3"
        />
      </div>

      <div style={buttonContainerStyle}>
        {/* Button to fetch menu data */}
        <button onClick={fetchMenus} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          {loading && currentDisplay === 'menus' ? 'กำลังดึงเมนู...' : 'ดึงข้อมูล Menus'}
        </button>
        {/* Button to fetch Orders data */}
        <button onClick={fetchOrders} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          {loading && currentDisplay === 'orders' ? 'กำลังดึง Orders...' : 'ดึงข้อมูล Orders'}
        </button>
        {/* Button to fetch Employees data */}
        <button onClick={fetchEmployees} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          {loading && currentDisplay === 'employees' ? 'กำลังดึง Employees...' : 'ดึงข้อมูล Employees'}
        </button>
        {/* Button to call general test API */}
        <button onClick={callTestApi} disabled={loading} style={buttonStyle}>
          {loading && currentDisplay === 'testApi' ? 'กำลังทดสอบ API...' : 'ทดสอบ API ทั่วไป'}
        </button>
        {/* Button to create a new Order */}
        <button onClick={() => {
          setCurrentDisplay('createOrder');
          setError(null);
          setCreateOrderMessage(null);
          // Clear form and item list on display change
          setNewOrderTableNumber('');
          setNewOrderTotalAmount('');
          setNewOrderStatus('Pending');
          setNewOrderPaymentStatus('Pending');
          setNewOrderItems([]);
          setCurrentMenuItemId('');
          setCurrentQuantity('');
          setCurrentPriceAtOrder('');
          setCurrentNotes('');
          // Clear other data displays
          setMenus(null);
          setOrders(null);
          setEmployees(null);
          setTestApiMessage(null);
        }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          สร้าง Order ใหม่
        </button>
      </div>

      <div style={resultsContainerStyle}>
        {loading && <p style={{ color: '#007bff' }}>กำลังโหลด...</p>}
        {error && <p style={{ color: '#dc3545' }}>ข้อผิดพลาด: {error}</p>}
        {(selectedRestaurantId === null || isNaN(selectedRestaurantId)) && (
          <p style={{ color: '#007bff', fontWeight: 'bold' }}>กรุณาป้อน Restaurant ID ที่ถูกต้อง</p>
        )}


        {currentDisplay === 'menus' && menus && (
          <div style={dataDisplayGridStyle}>
            <h2>ข้อมูลเมนู (ร้าน ID: {selectedRestaurantId})</h2>
            {menus.length > 0 ? (
              menus.map((menu: Menu) => (
                <div key={menu.id} style={itemCardStyle}>
                  <h3>{menu.name} (ID: {menu.id})</h3>
                  <p><strong>ร้านอาหาร ID:</strong> {menu.restaurant_id}</p>
                  <p><strong>คำอธิบาย:</strong> {menu.description}</p>
                  <p><strong>ราคา:</strong> {menu.base_price} บาท</p>
                  <p><strong>หมวดหมู่:</strong> {menu.category}</p>
                  <p><strong>พร้อมจำหน่าย:</strong> {menu.is_available ? 'ใช่' : 'ไม่'}</p>
                  {menu.image_url && (
                    <img
                      src={menu.image_url}
                      alt={menu.name}
                      style={{ maxWidth: '100%', height: '100px', objectFit: 'cover', borderRadius: '4px', marginTop: '10px' }}
                      onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => { e.currentTarget.onerror = null; e.currentTarget.src="https://placehold.co/150x100/A0A0A0/FFFFFF?text=No+Image" }}
                    />
                  )}
                  {/* Check if date is valid before displaying */}
                  <p style={{ fontSize: '0.8em', color: '#666' }}>สร้างเมื่อ: {menu.created_at ? new Date(menu.created_at).toLocaleString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {menu.updated_at ? new Date(menu.updated_at).toLocaleString() : 'N/A'}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบเมนูอาหารสำหรับร้านนี้ในฐานข้อมูล</p>
            )}
          </div>
        )}

        {currentDisplay === 'orders' && orders && (
          <div style={dataDisplayGridStyle}>
            <h2>ข้อมูล Orders (ร้าน ID: {selectedRestaurantId})</h2>
            {orders.length > 0 ? (
              orders.map((order: Order) => (
                <div key={order.id} style={itemCardStyle}>
                  <h3>Order ID: {order.id}</h3>
                  <p><strong>หมายเลขโต๊ะ:</strong> {order.table_number}</p>
                  <p><strong>ยอดรวม:</strong> {order.total_amount} บาท</p>
                  <p><strong>สถานะ:</strong> {order.status}</p>
                  <p><strong>สถานะการชำระเงิน:</strong> {order.payment_status}</p>
                  <p><strong>เวลาสั่ง:</strong> {new Date(order.order_time).toLocaleString()}</p>
                  {order.qr_code_url && <p><strong>QR Code URL:</strong> <a href={order.qr_code_url} target="_blank" rel="noopener noreferrer">ดู QR</a></p>}
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {order.updated_at ? new Date(order.updated_at).toLocaleString() : 'N/A'}</p>
                  <p><strong>ร้านอาหาร ID:</strong> {order.restaurant_id}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบข้อมูล Orders สำหรับร้านนี้ในฐานข้อมูล</p>
            )}
          </div>
        )}

        {currentDisplay === 'employees' && employees && (
          <div style={dataDisplayGridStyle}>
            <h2>ข้อมูลพนักงาน (ร้าน ID: {selectedRestaurantId})</h2>
            {employees.length > 0 ? (
              employees.map((employee: Employee) => (
                <div key={employee.id} style={itemCardStyle}>
                  <h3>{employee.full_name} (ID: {employee.id})</h3>
                  <p><strong>ตำแหน่ง:</strong> {employee.position}</p>
                  <p><strong>เบอร์โทรศัพท์:</strong> {employee.phone_number}</p>
                  <p><strong>เงินเดือน:</strong> {employee.salary} บาท</p>
                  <p><strong>วันที่จ้าง:</strong> {employee.hire_date ? new Date(employee.hire_date).toLocaleDateString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>สร้างเมื่อ: {employee.created_at ? new Date(employee.created_at).toLocaleString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {employee.updated_at ? new Date(employee.updated_at).toLocaleString() : 'N/A'}</p>
                  <p><strong>ร้านอาหาร ID:</strong> {employee.restaurant_id}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบข้อมูลพนักงานสำหรับร้านนี้ในฐานข้อมูล</p>
            )}
          </div>
        )}

        {currentDisplay === 'createOrder' && (
          <div style={createOrderFormStyle}>
            <h2>สร้าง Order ใหม่</h2>
            <p style={{ color: '#007bff', fontWeight: 'bold' }}>สำหรับร้าน ID: {selectedRestaurantId}</p>
            {/* Main Order Data Form */}
            <div style={formGroupStyle}>
              <label htmlFor="tableNumber" style={labelStyle}>หมายเลขโต๊ะ:</label>
              <input
                type="number"
                id="tableNumber"
                value={newOrderTableNumber}
                onChange={(e) => setNewOrderTableNumber(e.target.value)}
                style={inputStyle}
              />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="totalAmount" style={labelStyle}>ยอดรวม:</label>
              <input
                type="number"
                id="totalAmount"
                value={newOrderTotalAmount}
                onChange={(e) => setNewOrderTotalAmount(e.target.value)}
                style={inputStyle}
                step="0.01"
              />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="orderStatus" style={labelStyle}>สถานะ Order:</label>
              <select
                id="orderStatus"
                value={newOrderStatus}
                onChange={(e) => setNewOrderStatus(e.target.value)}
                style={inputStyle}
              >
                <option value="Pending">Pending</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
              </select>
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="paymentStatus" style={labelStyle}>สถานะการชำระเงิน:</label>
              <select
                id="paymentStatus"
                value={newOrderPaymentStatus}
                onChange={(e) => setNewOrderPaymentStatus(e.target.value)}
                style={inputStyle}
              >
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
                <option value="Refunded">Refunded</option>
              </select>
            </div>

            {/* Form for adding Order Items */}
            <h3 style={{ marginTop: '30px', borderBottom: '1px solid #eee', paddingBottom: '10px' }}>เพิ่มรายการสินค้า</h3>
            <div style={orderItemFormStyle}>
              <div style={formGroupStyle}>
                <label htmlFor="menuItemId" style={labelStyle}>Menu ID:</label>
                <input
                  type="number"
                  id="menuItemId"
                  value={currentMenuItemId}
                  onChange={(e) => setCurrentMenuItemId(e.target.value)}
                  style={inputStyle}
                />
              </div>
              <div style={formGroupStyle}>
                <label htmlFor="quantity" style={labelStyle}>จำนวน:</label>
                <input
                  type="number"
                  id="quantity"
                  value={currentQuantity}
                  onChange={(e) => setCurrentQuantity(e.target.value)}
                  style={inputStyle}
                />
              </div>
              <div style={formGroupStyle}>
                <label htmlFor="priceAtOrder" style={labelStyle}>ราคา ณ เวลาสั่ง:</label>
                <input
                  type="number"
                  id="priceAtOrder"
                  value={currentPriceAtOrder}
                  onChange={(e) => setCurrentPriceAtOrder(e.target.value)}
                  style={inputStyle}
                  step="0.01"
                />
              </div>
              <div style={formGroupStyle}>
                <label htmlFor="notes" style={labelStyle}>หมายเหตุ (ไม่บังคับ):</label>
                <input
                  type="text"
                  id="notes"
                  value={currentNotes}
                  onChange={(e) => setCurrentNotes(e.target.value)}
                  style={inputStyle}
                />
              </div>
              <button onClick={addOrderItem} style={buttonStyle}>
                เพิ่มรายการสินค้า
              </button>
            </div>

            {/* Display of added items */}
            {newOrderItems.length > 0 && (
              <div style={addedItemsListStyle}>
                <h3>รายการสินค้าใน Order นี้:</h3>
                {newOrderItems.map((item, index) => (
                  <div key={index} style={addedItemStyle}>
                    <p>Menu ID: {item.menu_id}, จำนวน: {item.quantity}, ราคา: {item.price_at_order} {item.notes && `(หมายเหตุ: ${item.notes})`}</p>
                  </div>
                ))}
              </div>
            )}

            {/* Main Order Save Button */}
            <button onClick={createOrder} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId) || newOrderItems.length === 0} style={buttonStyle}>
              {loading ? 'กำลังสร้าง Order...' : 'บันทึก Order'}
            </button>
            {createOrderMessage && <p style={successMessageStyle}>{createOrderMessage}</p>}
          </div>
        )}

        {currentDisplay === 'testApi' && testApiMessage && (
          <div style={testApiMessageStyle}>
            <h2>ผลลัพธ์จากการทดสอบ API ทั่วไป</h2>
            <p>{testApiMessage}</p>
          </div>
        )}
      </div>
    </div>
  );
}

// --- Basic Inline Styles (for quick styling) ---
const appContainerStyle: React.CSSProperties = {
  fontFamily: 'Arial, sans-serif',
  textAlign: 'center',
  padding: '20px',
  backgroundColor: '#f4f7f6',
  minHeight: '100vh',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  color: '#333',
};

const headerStyle: React.CSSProperties = {
  marginBottom: '30px',
  backgroundColor: '#ffffff',
  padding: '20px 40px',
  borderRadius: '10px',
  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
};

const dropdownContainerStyle: React.CSSProperties = {
  marginBottom: '20px',
  textAlign: 'center',
  padding: '15px',
  backgroundColor: '#e6f7ff',
  borderRadius: '8px',
  border: '1px solid #91d5ff',
  width: '100%',
  maxWidth: '400px',
  boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
};

const buttonContainerStyle: React.CSSProperties = {
  marginBottom: '30px',
  display: 'flex',
  gap: '15px',
  flexWrap: 'wrap',
  justifyContent: 'center',
};

const buttonStyle: React.CSSProperties = {
  padding: '12px 25px',
  fontSize: '16px',
  fontWeight: 'bold',
  color: '#fff',
  backgroundColor: '#007bff',
  border: 'none',
  borderRadius: '8px',
  cursor: 'pointer',
  transition: 'background-color 0.3s ease, transform 0.2s ease',
  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
};

const resultsContainerStyle: React.CSSProperties = {
  width: '100%',
  maxWidth: '900px',
  backgroundColor: '#ffffff',
  padding: '30px',
  borderRadius: '10px',
  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
  marginTop: '20px',
};

const dataDisplayGridStyle: React.CSSProperties = {
  display: 'grid',
  gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
  gap: '20px',
  marginTop: '20px',
  justifyContent: 'center',
};

const itemCardStyle: React.CSSProperties = {
  border: '1px solid #e0e0e0',
  borderRadius: '10px',
  padding: '20px',
  textAlign: 'left',
  backgroundColor: '#fafafa',
  boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'space-between',
};

const testApiMessageStyle: React.CSSProperties = {
  backgroundColor: '#e9f7ef',
  border: '1px solid #28a745',
  borderRadius: '8px',
  padding: '20px',
  color: '#28a745',
  fontWeight: 'bold',
};

// Styles for Create Order Form
const createOrderFormStyle: React.CSSProperties = {
  backgroundColor: '#f8f9fa',
  border: '1px solid #e9ecef',
  borderRadius: '10px',
  padding: '30px',
  marginTop: '20px',
  textAlign: 'left',
  maxWidth: '500px',
  margin: '20px auto',
  boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
};

const formGroupStyle: React.CSSProperties = {
  marginBottom: '15px',
};

const labelStyle: React.CSSProperties = {
  display: 'block',
  marginBottom: '5px',
  fontWeight: 'bold',
  color: '#555',
};

const inputStyle: React.CSSProperties = {
  width: '100%',
  padding: '10px',
  border: '1px solid #ced4da',
  borderRadius: '5px',
  boxSizing: 'border-box', // Include padding in element's total width and height
};

const successMessageStyle: React.CSSProperties = {
  marginTop: '20px',
  padding: '10px 15px',
  backgroundColor: '#d4edda',
  color: '#155724',
  border: '1px solid #28a745',
  borderRadius: '5px',
  textAlign: 'center',
};

// New styles for Order Item Form
const orderItemFormStyle: React.CSSProperties = {
  backgroundColor: '#e9f7ef',
  border: '1px dashed #28a745',
  borderRadius: '8px',
  padding: '20px',
  marginBottom: '20px',
};

const addedItemsListStyle: React.CSSProperties = {
  marginTop: '20px',
  padding: '15px',
  border: '1px solid #cce5ff',
  borderRadius: '8px',
  backgroundColor: '#e0f2ff',
};

const addedItemStyle: React.CSSProperties = {
  backgroundColor: '#ffffff',
  padding: '10px',
  borderRadius: '5px',
  marginBottom: '8px',
  boxShadow: '0 1px 3px rgba(0,0,0,0.08)',
};

export default App;
