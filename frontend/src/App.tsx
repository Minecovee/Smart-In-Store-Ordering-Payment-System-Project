import React, { useState } from 'react';
import axios from 'axios';
import './App.css'; // ตรวจสอบให้แน่ใจว่ามีไฟล์ App.css สำหรับจัดสไตล์พื้นฐาน

// กำหนด Interface สำหรับโครงสร้างข้อมูล
interface Menu {
  id: number;
  restaurant_id: number;
  name: string;
  description: string;
  base_price: string; // คาดว่ามาจาก Python เป็น string (Decimal)
  category: string;
  image_url: string | null;
  is_available: boolean;
  created_at: string; // ISO 8601 string
  updated_at: string; // ISO 8601 string
}

interface Order {
  id: number; // ตรงกับคอลัมน์ 'id' ใน DB
  restaurant_id: number;
  table_number: number;
  total_amount: string;
  status: string;
  payment_status: string;
  order_time: string; // ISO 8601 string
  updated_at: string;
  qr_code_url: string | null;
  items?: OrderItem[]; // Optional: จะถูกเพิ่มเข้ามาเมื่อดึง Order by ID
}

interface OrderItem { // Interface สำหรับ Order Items
  id?: number; // Optional, as it's generated by DB
  order_id?: number; // Optional, as it's linked by backend
  menu_id: number;
  quantity: number;
  price_at_order: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
}

interface Employee {
  id: number; // ตรงกับคอลัมน์ 'id' ในฐานข้อมูล
  restaurant_id: number;
  full_name: string;
  position: string;
  phone_number: string | null; // Removed email as per request
  salary: string; // As string because of Decimal in Python
  hire_date: string;
  created_at: string;
  updated_at: string;
}

const App: React.FC = () => {
  // --- Global States ---
  const [selectedRestaurantId, setSelectedRestaurantId] = useState<number | null>(1); // Default to ID 1 or your desired starting value
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [currentDisplay, setCurrentDisplay] = useState<string>('none'); // Controls which section to show

  // --- Data Display States ---
  const [menus, setMenus] = useState<Menu[] | null>(null);
  const [orders, setOrders] = useState<Order[] | null>(null);
  const [employees, setEmployees] = useState<Employee[] | null>(null);
  const [singleOrder, setSingleOrder] = useState<Order | null>(null); // For fetching single order
  const [orderItemsForOrder, setOrderItemsForOrder] = useState<OrderItem[] | null>(null); // For fetching order items
  const [testApiMessage, setTestApiMessage] = useState<string | null>(null);
  const [generatedQrCodeUrl, setGeneratedQrCodeUrl] = useState<string | null>(null); // NEW: State for PromptPay QR Code URL

  // --- Create Order Form States ---
  const [newOrderTableNumber, setNewOrderTableNumber] = useState<string>('');
  const [newOrderTotalAmount, setNewOrderTotalAmount] = useState<string>('');
  const [newOrderStatus, setNewOrderStatus] = useState<string>('Pending');
  const [newOrderPaymentStatus, setNewOrderPaymentStatus] = useState<string>('Pending');
  const [createOrderMessage, setCreateOrderMessage] = useState<string | null>(null);
  const [newOrderItems, setNewOrderItems] = useState<OrderItem[]>([]);
  const [currentMenuItemId, setCurrentMenuItemId] = useState<string>('');
  const [currentQuantity, setCurrentQuantity] = useState<string>('');
  const [currentPriceAtOrder, setCurrentPriceAtOrder] = useState<string>('');
  const [currentNotes, setCurrentNotes] = useState<string>('');

  // --- Create Menu Form States ---
  const [newMenuName, setNewMenuName] = useState<string>('');
  const [newMenuDescription, setNewMenuDescription] = useState<string>('');
  const [newMenuPrice, setNewMenuPrice] = useState<string>('');
  const [newMenuCategory, setNewMenuCategory] = useState<string>('');
  const [newMenuImageUrl, setNewMenuImageUrl] = useState<string>('');
  const [newMenuIsAvailable, setNewMenuIsAvailable] = useState<boolean>(true);
  const [createMenuMessage, setCreateMenuMessage] = useState<string | null>(null);

  // --- Create Employee Form States ---
  const [newEmployeeFullName, setNewEmployeeFullName] = useState<string>('');
  const [newEmployeePosition, setNewEmployeePosition] = useState<string>('');
  const [newEmployeePhoneNumber, setNewEmployeePhoneNumber] = useState<string>('');
  const [newEmployeeSalary, setNewEmployeeSalary] = useState<string>('');
  const [newEmployeeHireDate, setNewEmployeeHireDate] = useState<string>(new Date().toISOString().slice(0, 10));
  const [createEmployeeMessage, setCreateEmployeeMessage] = useState<string | null>(null);

  // --- Update/Delete Common States ---
  const [entityIdToManage, setEntityIdToManage] = useState<string>('');
  // Removed updatePayload state as we're moving to specific fields for update
  const [updateSuccessMessage, setUpdateSuccessMessage] = useState<string | null>(null);

  // --- States for Edit Menu Form ---
  const [editMenuName, setEditMenuName] = useState<string>('');
  const [editMenuDescription, setEditMenuDescription] = useState<string>('');
  const [editMenuPrice, setEditMenuPrice] = useState<string>('');
  const [editMenuCategory, setEditMenuCategory] = useState<string>('');
  const [editMenuImageUrl, setEditMenuImageUrl] = useState<string>('');
  const [editMenuIsAvailable, setEditMenuIsAvailable] = useState<boolean>(false);

  // --- States for Edit Order Form ---
  const [editOrderTableNumber, setEditOrderTableNumber] = useState<string>('');
  const [editOrderTotalAmount, setEditOrderTotalAmount] = useState<string>('');
  const [editOrderStatus, setEditOrderStatus] = useState<string>('');
  const [editOrderPaymentStatus, setEditOrderPaymentStatus] = useState<string>('');
  const [editOrderQrCodeUrl, setEditOrderQrCodeUrl] = useState<string | null>('');

  // --- States for Edit Employee Form ---
  const [editEmployeeFullName, setEditEmployeeFullName] = useState<string>('');
  const [editEmployeePosition, setEditEmployeePosition] = useState<string>('');
  const [editEmployeePhoneNumber, setEditEmployeePhoneNumber] = useState<string>('');
  const [editEmployeeSalary, setEditEmployeeSalary] = useState<string>('');
  const [editEmployeeHireDate, setEditEmployeeHireDate] = useState<string>('');


  // --- General Helper Function to Reset States ---
  const resetAllStates = () => {
    setLoading(false);
    setError(null);
    setMenus(null);
    setOrders(null);
    setEmployees(null);
    setSingleOrder(null);
    setOrderItemsForOrder(null);
    setTestApiMessage(null);
    setGeneratedQrCodeUrl(null); // NEW: Reset QR Code URL
    setCreateOrderMessage(null);
    setNewOrderTableNumber('');
    setNewOrderTotalAmount('');
    setNewOrderStatus('Pending');
    setNewOrderPaymentStatus('Pending');
    setNewOrderItems([]);
    setCurrentMenuItemId('');
    setCurrentQuantity('');
    setCurrentPriceAtOrder('');
    setCurrentNotes('');
    setNewMenuName('');
    setNewMenuDescription('');
    setNewMenuPrice('');
    setNewMenuCategory('');
    setNewMenuImageUrl('');
    setNewMenuIsAvailable(true);
    setCreateMenuMessage(null);
    setNewEmployeeFullName('');
    setNewEmployeePosition('');
    setNewEmployeePhoneNumber('');
    setNewEmployeeSalary('');
    setNewEmployeeHireDate(new Date().toISOString().slice(0, 10));
    setCreateEmployeeMessage(null);
    setEntityIdToManage('');
    setUpdateSuccessMessage(null); // Reset update message

    // Reset edit form states
    setEditMenuName('');
    setEditMenuDescription('');
    setEditMenuPrice('');
    setEditMenuCategory('');
    setEditMenuImageUrl('');
    setEditMenuIsAvailable(false);

    setEditOrderTableNumber('');
    setEditOrderTotalAmount('');
    setEditOrderStatus('');
    setEditOrderPaymentStatus('');
    setEditOrderQrCodeUrl('');

    setEditEmployeeFullName('');
    setEditEmployeePosition('');
    setEditEmployeePhoneNumber('');
    setEditEmployeeSalary('');
    setEditEmployeeHireDate('');
  };

  // --- Function to handle Restaurant ID input change ---
  const handleRestaurantIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    const id = value === '' ? null : parseInt(value, 10);
    setSelectedRestaurantId(id);
    resetAllStates(); // Reset all data when changing restaurant ID
    setCurrentDisplay('none');
  };

  // --- API Functions ---

  // Fetches all menus for the selected restaurant
  const fetchMenus = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("กรุณาป้อน Restaurant ID ที่ถูกต้องก่อน");
      return;
    }
    resetAllStates();
    setLoading(true);
    setCurrentDisplay('menus');
    try {
      const response = await axios.get<Menu[]>(`http://localhost:5000/api/menus?restaurant_id=${selectedRestaurantId}`);
      setMenus(response.data);
    } catch (err: any) {
      console.error("Error fetching menus:", err);
      setError("ไม่สามารถดึงข้อมูลเมนูได้ กรุณาตรวจสอบ Backend (พอร์ต 5000) และการเชื่อมต่อฐานข้อมูล");
    } finally {
      setLoading(false);
    }
  };

  // Creates a new menu item
  const createMenu = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("กรุณาป้อน Restaurant ID ที่ถูกต้องก่อน");
      return;
    }
    setLoading(true);
    setCreateMenuMessage(null);
    setError(null);
    setCurrentDisplay('createMenu');

    if (!newMenuName || !newMenuPrice || !newMenuCategory) {
      setError("กรุณากรอกข้อมูลเมนูที่จำเป็นให้ครบถ้วน (ชื่อ, ราคา, หมวดหมู่)");
      setLoading(false);
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/api/menus', {
        restaurant_id: selectedRestaurantId,
        name: newMenuName,
        description: newMenuDescription || null,
        base_price: parseFloat(newMenuPrice),
        category: newMenuCategory,
        image_url: newMenuImageUrl || null,
        is_available: newMenuIsAvailable,
      });
      setCreateMenuMessage(`เมนูถูกสร้างเรียบร้อยแล้ว! ID: ${response.data.id}`);
      setNewMenuName('');
      setNewMenuDescription('');
      setNewMenuPrice('');
      setNewMenuCategory('');
      setNewMenuImageUrl('');
      setNewMenuIsAvailable(true);
      fetchMenus(); // Refresh menu list
    } catch (err: any) {
      console.error("Error creating menu:", err);
      setError(`ไม่สามารถสร้างเมนูได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // NEW: Load Menu Data for Editing
  const loadMenuForEdit = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Menu ID ที่ถูกต้องเพื่อโหลดข้อมูล");
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages
    try {
      const response = await axios.get<Menu>(`http://localhost:5000/api/menus/${entityIdToManage}`);
      const menuData = response.data;
      setEditMenuName(menuData.name);
      setEditMenuDescription(menuData.description || '');
      setEditMenuPrice(menuData.base_price);
      setEditMenuCategory(menuData.category);
      setEditMenuImageUrl(menuData.image_url || '');
      setEditMenuIsAvailable(menuData.is_available);
      setUpdateSuccessMessage(`โหลดข้อมูลเมนู ID ${menuData.id} สำหรับแก้ไขแล้ว`);
    } catch (err: any) {
      console.error("Error loading menu for edit:", err);
      setError(`ไม่พบเมนู ID: ${entityIdToManage} หรือเกิดข้อผิดพลาดในการโหลดข้อมูล`);
    } finally {
      setLoading(false);
    }
  };

  // Updates an existing menu item
  const updateMenu = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Menu ID ที่ถูกต้อง");
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages

    try {
      const payload: Partial<Menu> = {
        name: editMenuName,
        description: editMenuDescription,
        // ✅ Fixed: Convert number from parseFloat to string for base_price
        base_price: parseFloat(editMenuPrice).toFixed(2), 
        category: editMenuCategory,
        image_url: editMenuImageUrl,
        is_available: editMenuIsAvailable,
      };

      const response = await axios.put(`http://localhost:5000/api/menus/${entityIdToManage}`, payload);
      setUpdateSuccessMessage(`เมนู ID ${entityIdToManage} ถูกอัปเดต: ${response.data.message}`);
      setEntityIdToManage(''); // Clear ID after successful operation
      // Clear edit form states
      setEditMenuName('');
      setEditMenuDescription('');
      setEditMenuPrice('');
      setEditMenuCategory('');
      setEditMenuImageUrl('');
      setEditMenuIsAvailable(false);
      fetchMenus(); // Refresh menu list
    } catch (err: any) {
      console.error("Error updating menu:", err);
      setError(`ไม่สามารถอัปเดตเมนูได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Deletes a menu item
  const deleteMenu = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Menu ID ที่ถูกต้อง");
      return;
    }
    if (!window.confirm(`คุณแน่ใจหรือไม่ที่จะลบเมนู ID ${entityIdToManage}?`)) {
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages

    try {
      const response = await axios.delete(`http://localhost:5000/api/menus/${entityIdToManage}`);
      setUpdateSuccessMessage(`เมนู ID ${entityIdToManage} ถูกลบ: ${response.data.message}`);
      setEntityIdToManage(''); // Clear ID after successful operation
      fetchMenus(); // Refresh menu list
    } catch (err: any) {
      console.error("Error deleting menu:", err);
      setError(`ไม่สามารถลบเมนูได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };


  // Fetches all orders for the selected restaurant
  const fetchOrders = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("กรุณาป้อน Restaurant ID ที่ถูกต้องก่อน");
      return;
    }
    resetAllStates();
    setLoading(true);
    setCurrentDisplay('orders');

    try {
      const response = await axios.get<Order[]>(`http://localhost:5000/api/orders?restaurant_id=${selectedRestaurantId}`);
      setOrders(response.data);
    } catch (err: any) {
      console.error("Error fetching orders:", err);
      setError("ไม่สามารถดึงข้อมูล Orders ได้ กรุณาตรวจสอบ Backend (พอร์ต 5000) และ API '/api/orders' ของคุณ");
    } finally {
      setLoading(false);
    }
  };

  // Fetches a single order by ID
  const fetchSingleOrder = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Order ID ที่ถูกต้อง");
      return;
    }
    resetAllStates(); // Clear previous data
    setLoading(true);
    setCurrentDisplay('singleOrder');

    try {
      const response = await axios.get<Order>(`http://localhost:5000/api/orders/${entityIdToManage}`);
      setSingleOrder(response.data);
    } catch (err: any) {
      console.error("Error fetching single order:", err);
      setError(`ไม่พบ Order ID: ${entityIdToManage} หรือเกิดข้อผิดพลาดในการดึงข้อมูล`);
    } finally {
      setLoading(false);
    }
  };

  // Fetches order items for a specific order ID
  const fetchOrderItems = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Order ID ที่ถูกต้อง");
      return;
    }
    resetAllStates(); // Clear previous data
    setLoading(true);
    setCurrentDisplay('orderItems');

    try {
      const response = await axios.get<OrderItem[]>(`http://localhost:5000/api/orders/${entityIdToManage}/items`);
      setOrderItemsForOrder(response.data);
    } catch (err: any) {
      console.error("Error fetching order items:", err);
      setError(`ไม่พบรายการสินค้าสำหรับ Order ID: ${entityIdToManage} หรือเกิดข้อผิดพลาด`);
    } finally {
      setLoading(false);
    }
  };

  // NEW: Load Order Data for Editing
  const loadOrderForEdit = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Order ID ที่ถูกต้องเพื่อโหลดข้อมูล");
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages
    setGeneratedQrCodeUrl(null); // Clear QR code when loading new order
    try {
      const response = await axios.get<Order>(`http://localhost:5000/api/orders/${entityIdToManage}`);
      const orderData = response.data;
      setEditOrderTableNumber(orderData.table_number.toString());
      setEditOrderTotalAmount(orderData.total_amount);
      setEditOrderStatus(orderData.status);
      setEditOrderPaymentStatus(orderData.payment_status);
      setEditOrderQrCodeUrl(orderData.qr_code_url || '');
      setSingleOrder(orderData); // Store fetched order in singleOrder state for QR generation
      setUpdateSuccessMessage(`โหลดข้อมูล Order ID ${orderData.id} สำหรับแก้ไขแล้ว`);
    } catch (err: any) {
      console.error("Error loading order for edit:", err);
      setError(`ไม่พบ Order ID: ${entityIdToManage} หรือเกิดข้อผิดพลาดในการโหลดข้อมูล`);
    } finally {
      setLoading(false);
    }
  };


  // Updates an existing order
  const updateOrder = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Order ID ที่ถูกต้อง");
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages
    setGeneratedQrCodeUrl(null); // Clear QR code when updating order

    try {
      const payload: Partial<Order> = {
        table_number: parseInt(editOrderTableNumber, 10),
        total_amount: parseFloat(editOrderTotalAmount).toFixed(2), // Ensure 2 decimal places
        status: editOrderStatus,
        payment_status: editOrderPaymentStatus,
        qr_code_url: editOrderQrCodeUrl || null,
      };

      const response = await axios.put(`http://localhost:5000/api/orders/${entityIdToManage}`, payload);
      setUpdateSuccessMessage(`Order ID ${entityIdToManage} ถูกอัปเดต: ${response.data.message}`);
      setEntityIdToManage(''); // Clear ID after successful operation
      // Clear edit form states
      setEditOrderTableNumber('');
      setEditOrderTotalAmount('');
      setEditOrderStatus('');
      setEditOrderPaymentStatus('');
      setEditOrderQrCodeUrl('');
      fetchOrders(); // Refresh order list
    } catch (err: any) {
      console.error("Error updating order:", err);
      setError(`ไม่สามารถอัปเดต Order ได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Deletes an order
  const deleteOrder = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Order ID ที่ถูกต้อง");
      return;
    }
    if (!window.confirm(`คุณแน่ใจหรือไม่ที่จะลบ Order ID ${entityIdToManage}?`)) {
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages
    setGeneratedQrCodeUrl(null); // Clear QR code when deleting order

    try {
      const response = await axios.delete(`http://localhost:5000/api/orders/${entityIdToManage}`);
      setUpdateSuccessMessage(`Order ID ${entityIdToManage} ถูกลบ: ${response.data.message}`);
      setEntityIdToManage(''); // Clear ID after successful operation
      fetchOrders(); // Refresh order list
    } catch (err: any) {
      console.error("Error deleting order:", err);
      setError(`ไม่สามารถลบ Order ได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Function to add an order item to the new order list
  const addOrderItem = () => {
    // Basic validation for order item
    if (!currentMenuItemId || !currentQuantity || !currentPriceAtOrder) {
      alert("กรุณากรอก Menu ID, Quantity และ Price At Order ให้ครบถ้วนสำหรับรายการสินค้า");
      return;
    }

    const newItem: OrderItem = {
      menu_id: parseInt(currentMenuItemId, 10),
      quantity: parseInt(currentQuantity, 10),
      price_at_order: parseFloat(currentPriceAtOrder),
      notes: currentNotes || undefined, // Allow notes to be optional
    };

    setNewOrderItems([...newOrderItems, newItem]);
    // Clear current item fields for next entry
    setCurrentMenuItemId('');
    setCurrentQuantity('');
    setCurrentPriceAtOrder('');
    setCurrentNotes('');
    setError(null); // Clear any previous error
  };

  // Function to create a new Order (sends restaurant_id, table_number, payment_status, and items)
  const createOrder = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("กรุณาป้อน Restaurant ID ที่ถูกต้องก่อน");
      return;
    }
    setLoading(true);
    setError(null);
    setCreateOrderMessage(null);
    setCurrentDisplay('createOrder'); // Ensure form is visible

    // Validate main Order data
    if (!newOrderTableNumber || !newOrderTotalAmount || !newOrderStatus || !newOrderPaymentStatus) {
      setError("กรุณากรอกข้อมูล Order หลักให้ครบถ้วน");
      setLoading(false);
      return;
    }
    // Validate if there are items in the order
    if (newOrderItems.length === 0) {
      setError("กรุณาเพิ่มรายการสินค้าอย่างน้อย 1 รายการใน Order");
      setLoading(false);
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/api/orders', {
        restaurant_id: selectedRestaurantId,
        table_number: parseInt(newOrderTableNumber, 10),
        total_amount: parseFloat(newOrderTotalAmount),
        status: newOrderStatus,
        payment_status: newOrderPaymentStatus,
        items: newOrderItems, // Send items list
      });
      setCreateOrderMessage(`Order ถูกสร้างเรียบร้อยแล้ว! ID: ${response.data.order_id}`);
      // Clear main Order form fields
      setNewOrderTableNumber('');
      setNewOrderTotalAmount('');
      setNewOrderStatus('Pending');
      setNewOrderPaymentStatus('Pending');
      setNewOrderItems([]); // Clear added items

      fetchOrders(); // Refresh Orders list
    } catch (err: any) {
      console.error("Error creating order:", err);
      setError(`ไม่สามารถสร้าง Order ได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // NEW: Function to generate PromptPay QR Code
  const handleGeneratePromptPayQr = () => {
    if (!singleOrder || !singleOrder.total_amount) {
      setError("ไม่พบข้อมูล Order หรือยอดรวมสำหรับสร้าง QR Code กรุณาโหลด Order ก่อน");
      return;
    }

    const mockPromptPayId = '0812345678'; // Replace with a real PromptPay ID if available
    const amount = parseFloat(singleOrder.total_amount).toFixed(2);
    // Using promptpay.io for a quick simulation. For production, you'd use a robust library or payment gateway API.
    const qrUrl = `https://promptpay.io/${mockPromptPayId}/${amount}.png`;
    setGeneratedQrCodeUrl(qrUrl);
    setUpdateSuccessMessage(`สร้าง QR Code สำหรับยอด ${amount} บาทแล้ว`);
  };


  // Fetches all employees for the selected restaurant
  const fetchEmployees = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("กรุณาป้อน Restaurant ID ที่ถูกต้องก่อน");
      return;
    }
    resetAllStates();
    setLoading(true);
    setCurrentDisplay('employees');

    try {
      const response = await axios.get<Employee[]>(`http://localhost:5000/api/employees?restaurant_id=${selectedRestaurantId}`);
      setEmployees(response.data);
    } catch (err: any) {
      console.error("Error fetching employees:", err);
      setError("ไม่สามารถดึงข้อมูล Employees ได้ กรุณาตรวจสอบ Backend (พอร์ต 5000) และ API '/api/employees' ของคุณ");
    } finally {
      setLoading(false);
    }
  };

  // Creates a new employee
  const createEmployee = async () => {
    if (selectedRestaurantId === null || isNaN(selectedRestaurantId)) {
      setError("กรุณาป้อน Restaurant ID ที่ถูกต้องก่อน");
      return;
    }
    setLoading(true);
    setCreateEmployeeMessage(null);
    setError(null);
    setCurrentDisplay('createEmployee');

    if (!newEmployeeFullName || !newEmployeePosition || !newEmployeeSalary || !newEmployeeHireDate) {
      setError("กรุณากรอกข้อมูลพนักงานที่จำเป็นให้ครบถ้วน (ชื่อ, ตำแหน่ง, เงินเดือน, วันที่จ้าง)");
      setLoading(false);
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/api/employees', {
        restaurant_id: selectedRestaurantId,
        full_name: newEmployeeFullName,
        position: newEmployeePosition,
        phone_number: newEmployeePhoneNumber || null,
        salary: parseFloat(newEmployeeSalary),
        hire_date: newEmployeeHireDate,
      });
      setCreateEmployeeMessage(`พนักงานถูกสร้างเรียบร้อยแล้ว! ID: ${response.data.id}`);
      setNewEmployeeFullName('');
      setNewEmployeePosition('');
      setNewEmployeePhoneNumber('');
      setNewEmployeeSalary('');
      setNewEmployeeHireDate(new Date().toISOString().slice(0, 10));
      fetchEmployees(); // Refresh employee list
    } catch (err: any) {
      console.error("Error creating employee:", err);
      setError(`ไม่สามารถสร้างพนักงานได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // NEW: Load Employee Data for Editing
  const loadEmployeeForEdit = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Employee ID ที่ถูกต้องเพื่อโหลดข้อมูล");
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages
    try {
      // Note: Backend's GET /api/employees doesn't support direct ID fetch.
      // It supports filtering by restaurant_id or getting all.
      // If you need direct ID fetch, consider adding a new backend endpoint like /api/employees/<int:id>.
      // For now, we'll try to get all employees and find by ID locally for demonstration.
      // A more robust solution would involve a dedicated endpoint on the backend.
      const response = await axios.get<Employee[]>(`http://localhost:5000/api/employees?restaurant_id=${selectedRestaurantId}`);
      const employeeData = response.data.find(emp => emp.id === parseInt(entityIdToManage, 10));

      if (employeeData) {
        setEditEmployeeFullName(employeeData.full_name);
        setEditEmployeePosition(employeeData.position);
        setEditEmployeePhoneNumber(employeeData.phone_number || '');
        setEditEmployeeSalary(employeeData.salary);
        setEditEmployeeHireDate(employeeData.hire_date.slice(0, 10)); // Format to YYYY-MM-DD
        setUpdateSuccessMessage(`โหลดข้อมูลพนักงาน ID ${employeeData.id} สำหรับแก้ไขแล้ว`);
      } else {
        setError(`ไม่พบพนักงาน ID: ${entityIdToManage} สำหรับ Restaurant ID ${selectedRestaurantId}`);
      }
    } catch (err: any) {
      console.error("Error loading employee for edit:", err);
      setError(`ไม่พบพนักงาน ID: ${entityIdToManage} หรือเกิดข้อผิดพลาดในการโหลดข้อมูล`);
    } finally {
      setLoading(false);
    }
  };

  // Updates an existing employee
  const updateEmployee = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Employee ID ที่ถูกต้อง");
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages

    try {
      const payload: Partial<Employee> = {
        full_name: editEmployeeFullName,
        position: editEmployeePosition,
        phone_number: editEmployeePhoneNumber || null,
        salary: parseFloat(editEmployeeSalary).toFixed(2), // ✅ Fixed: Convert number from parseFloat to string for salary
        hire_date: editEmployeeHireDate,
      };

      const response = await axios.put(`http://localhost:5000/api/employees/${entityIdToManage}`, payload);
      setUpdateSuccessMessage(`พนักงาน ID ${entityIdToManage} ถูกอัปเดต: ${response.data.message}`);
      setEntityIdToManage(''); // Clear ID after successful operation
      // Clear edit form states
      setEditEmployeeFullName('');
      setEditEmployeePosition('');
      setEditEmployeePhoneNumber('');
      setEditEmployeeSalary('');
      setEditEmployeeHireDate('');
      fetchEmployees(); // Refresh employee list
    } catch (err: any) {
      console.error("Error updating employee:", err);
      setError(`ไม่สามารถอัปเดตพนักงานได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Deletes an employee
  const deleteEmployee = async () => {
    if (!entityIdToManage || isNaN(parseInt(entityIdToManage, 10))) {
      setError("กรุณาป้อน Employee ID ที่ถูกต้อง");
      return;
    }
    if (!window.confirm(`คุณแน่ใจหรือไม่ที่จะลบพนักงาน ID ${entityIdToManage}?`)) {
      return;
    }
    setLoading(true);
    setError(null);
    setUpdateSuccessMessage(null); // Clear previous messages

    try {
      const response = await axios.delete(`http://localhost:5000/api/employees/${entityIdToManage}`);
      setUpdateSuccessMessage(`พนักงาน ID ${entityIdToManage} ถูกลบ: ${response.data.message}`);
      setEntityIdToManage(''); // Clear ID after successful operation
      fetchEmployees(); // Refresh employee list
    } catch (err: any) {
      console.error("Error deleting employee:", err);
      setError(`ไม่สามารถลบพนักงานได้: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // --- General Test API ---
  const callTestApi = async () => {
    resetAllStates();
    setLoading(true);
    setCurrentDisplay('testApi');

    try {
      const response = await axios.get<{ message: string; data: string }>('http://localhost:5000/api/test');
      setTestApiMessage(response.data.message + " - " + response.data.data);
    } catch (err: any) {
      console.error("Error calling test API:", err);
      setError("ไม่สามารถเรียก API ทดสอบได้ กรุณาตรวจสอบว่า Backend กำลังทำงาน");
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="App" style={appContainerStyle}>
      <header style={headerStyle}>
        <h1>Backend Test01</h1>
        <p>ทดสอบการเชื่อมต่อ Backend (Flask) และดึง/จัดการข้อมูลจากฐานข้อมูล</p>
      </header>

      {/* Restaurant ID Input */}
      <div style={inputContainerStyle}>
        <label htmlFor="restaurant-id-input" style={labelStyle}>ป้อน Restaurant ID:</label>
        <input
          type="number"
          id="restaurant-id-input"
          value={selectedRestaurantId === null ? '' : selectedRestaurantId}
          onChange={handleRestaurantIdChange}
          style={inputStyle}
          placeholder="เช่น 1, 2, 3"
        />
      </div>

      {/* Main Navigation Buttons */}
      <div style={buttonContainerStyle}>
        <button onClick={fetchMenus} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          {loading && currentDisplay === 'menus' ? 'กำลังดึงเมนู...' : 'ดึงข้อมูล Menus'}
        </button>
        <button onClick={fetchOrders} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          {loading && currentDisplay === 'orders' ? 'กำลังดึง Orders...' : 'ดึงข้อมูล Orders'}
        </button>
        <button onClick={fetchEmployees} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          {loading && currentDisplay === 'employees' ? 'กำลังดึง Employees...' : 'ดึงข้อมูล Employees'}
        </button>
        <button onClick={callTestApi} disabled={loading} style={buttonStyle}>
          {loading && currentDisplay === 'testApi' ? 'กำลังทดสอบ API...' : 'ทดสอบ API ทั่วไป'}
        </button>
      </div>

      <div style={buttonContainerStyle}> {/* New Row for CRUD Operations */}
        <button onClick={() => { resetAllStates(); setCurrentDisplay('createMenu'); }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          สร้าง Menu
        </button>
        <button onClick={() => { resetAllStates(); setCurrentDisplay('updateDeleteMenus'); }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          อัปเดต/ลบ Menu
        </button>
        <button onClick={() => { resetAllStates(); setCurrentDisplay('createOrder'); }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          สร้าง Order
        </button>
        <button onClick={() => { resetAllStates(); setCurrentDisplay('updateDeleteOrders'); }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          อัปเดต/ลบ Order
        </button>
        <button onClick={() => { resetAllStates(); setCurrentDisplay('createEmployee'); }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          สร้าง Employee
        </button>
        <button onClick={() => { resetAllStates(); setCurrentDisplay('updateDeleteEmployees'); }} disabled={selectedRestaurantId === null || isNaN(selectedRestaurantId)} style={buttonStyle}>
          อัปเดต/ลบ Employee
        </button>
      </div>

      {/* Main Results and Forms Area */}
      <div style={resultsContainerStyle}>
        {loading && <p style={{ color: '#007bff' }}>กำลังโหลด...</p>}
        {error && <p style={{ color: '#dc3545' }}>ข้อผิดพลาด: {error}</p>}
        {updateSuccessMessage && <p style={successMessageStyle}>{updateSuccessMessage}</p>} {/* Display update success messages */}
        {(selectedRestaurantId === null || isNaN(selectedRestaurantId)) && (
          <p style={{ color: '#007bff', fontWeight: 'bold' }}>กรุณาป้อน Restaurant ID ที่ถูกต้อง</p>
        )}

        {/* --- Display Menus --- */}
        {currentDisplay === 'menus' && menus && (
          <div style={dataDisplayGridStyle}>
            <h2>ข้อมูลเมนู (ร้าน ID: {selectedRestaurantId})</h2>
            {menus.length > 0 ? (
              menus.map((menu: Menu) => (
                <div key={menu.id} style={itemCardStyle}>
                  <h3>{menu.name} (ID: {menu.id})</h3>
                  <p><strong>ร้านอาหาร ID:</strong> {menu.restaurant_id}</p>
                  <p><strong>คำอธิบาย:</strong> {menu.description}</p>
                  <p><strong>ราคา:</strong> {menu.base_price} บาท</p>
                  <p><strong>หมวดหมู่:</strong> {menu.category}</p>
                  <p><strong>พร้อมจำหน่าย:</strong> {menu.is_available ? 'ใช่' : 'ไม่'}</p>
                  {menu.image_url && (
                    <img
                      src={menu.image_url}
                      alt={menu.name}
                      style={{ maxWidth: '100%', height: '100px', objectFit: 'cover', borderRadius: '4px', marginTop: '10px' }}
                      onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => { e.currentTarget.onerror = null; e.currentTarget.src="https://placehold.co/150x100/A0A0A0/FFFFFF?text=No+Image" }}
                    />
                  )}
                  <p style={{ fontSize: '0.8em', color: '#666' }}>สร้างเมื่อ: {menu.created_at ? new Date(menu.created_at).toLocaleString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {menu.updated_at ? new Date(menu.updated_at).toLocaleString() : 'N/A'}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบเมนูอาหารสำหรับร้านนี้ในฐานข้อมูล</p>
            )}
          </div>
        )}

        {/* --- Create Menu Form --- */}
        {currentDisplay === 'createMenu' && (
          <div style={crudFormStyle}>
            <h2>สร้าง Menu ใหม่ (ร้าน ID: {selectedRestaurantId})</h2>
            <div style={formGroupStyle}>
              <label htmlFor="newMenuName" style={labelStyle}>ชื่อเมนู:</label>
              <input type="text" id="newMenuName" value={newMenuName} onChange={(e) => setNewMenuName(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newMenuDescription" style={labelStyle}>คำอธิบาย:</label>
              <textarea id="newMenuDescription" value={newMenuDescription} onChange={(e) => setNewMenuDescription(e.target.value)} style={inputStyle} rows={3}></textarea>
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newMenuPrice" style={labelStyle}>ราคา:</label>
              <input type="number" id="newMenuPrice" value={newMenuPrice} onChange={(e) => setNewMenuPrice(e.target.value)} style={inputStyle} step="0.01" />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newMenuCategory" style={labelStyle}>หมวดหมู่:</label>
              <input type="text" id="newMenuCategory" value={newMenuCategory} onChange={(e) => setNewMenuCategory(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newMenuImageUrl" style={labelStyle}>URL รูปภาพ (ไม่บังคับ):</label>
              <input type="text" id="newMenuImageUrl" value={newMenuImageUrl} onChange={(e) => setNewMenuImageUrl(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newMenuIsAvailable" style={labelStyle}>พร้อมจำหน่าย:</label>
              <input type="checkbox" id="newMenuIsAvailable" checked={newMenuIsAvailable} onChange={(e) => setNewMenuIsAvailable(e.target.checked)} />
            </div>
            <button onClick={createMenu} disabled={loading} style={buttonStyle}>
              {loading ? 'กำลังสร้างเมนู...' : 'บันทึกเมนูใหม่'}
            </button>
            {createMenuMessage && <p style={successMessageStyle}>{createMenuMessage}</p>}
          </div>
        )}

        {/* --- Update/Delete Menus Section --- */}
        {currentDisplay === 'updateDeleteMenus' && (
          <div style={crudFormStyle}>
            <h2>อัปเดต / ลบ Menu</h2>
            <div style={formGroupStyle}>
              <label htmlFor="menuIdUpdateDelete" style={labelStyle}>Menu ID:</label>
              <input type="number" id="menuIdUpdateDelete" value={entityIdToManage} onChange={(e) => setEntityIdToManage(e.target.value)} style={inputStyle} />
            </div>
            <div style={buttonContainerStyle}>
              <button onClick={loadMenuForEdit} disabled={loading || !entityIdToManage} style={buttonStyle}>
                โหลดข้อมูลสำหรับแก้ไข
              </button>
            </div>
            
            {/* NEW: Specific Input Fields for Menu Update */}
            <h3 style={{ marginTop: '20px', borderBottom: '1px solid #eee', paddingBottom: '10px' }}>แก้ไขข้อมูลเมนู</h3>
            <div style={formGroupStyle}>
              <label htmlFor="editMenuName" style={labelStyle}>ชื่อเมนู:</label>
              <input type="text" id="editMenuName" value={editMenuName} onChange={(e) => setEditMenuName(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editMenuDescription" style={labelStyle}>คำอธิบาย:</label>
              <textarea id="editMenuDescription" value={editMenuDescription} onChange={(e) => setEditMenuDescription(e.target.value)} style={inputStyle} rows={3}></textarea>
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editMenuPrice" style={labelStyle}>ราคา:</label>
              <input type="number" id="editMenuPrice" value={editMenuPrice} onChange={(e) => setEditMenuPrice(e.target.value)} style={inputStyle} step="0.01" />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editMenuCategory" style={labelStyle}>หมวดหมู่:</label>
              <input type="text" id="editMenuCategory" value={editMenuCategory} onChange={(e) => setEditMenuCategory(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editMenuImageUrl" style={labelStyle}>URL รูปภาพ (ไม่บังคับ):</label>
              <input type="text" id="editMenuImageUrl" value={editMenuImageUrl} onChange={(e) => setEditMenuImageUrl(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editMenuIsAvailable" style={labelStyle}>พร้อมจำหน่าย:</label>
              <input type="checkbox" id="editMenuIsAvailable" checked={editMenuIsAvailable} onChange={(e) => setEditMenuIsAvailable(e.target.checked)} />
            </div>

            <div style={buttonContainerStyle}>
              <button onClick={updateMenu} disabled={loading || !entityIdToManage} style={buttonStyle}>
                อัปเดต Menu
              </button>
              <button onClick={deleteMenu} disabled={loading || !entityIdToManage} style={{ ...buttonStyle, backgroundColor: '#dc3545' }}>
                ลบ Menu
              </button>
            </div>
          </div>
        )}

        {/* --- Display Orders --- */}
        {currentDisplay === 'orders' && orders && (
          <div style={dataDisplayGridStyle}>
            <h2>ข้อมูล Orders (ร้าน ID: {selectedRestaurantId})</h2>
            {orders.length > 0 ? (
              orders.map((order: Order) => (
                <div key={order.id} style={itemCardStyle}>
                  <h3>Order ID: {order.id}</h3>
                  <p><strong>ร้านอาหาร ID:</strong> {order.restaurant_id}</p>
                  <p><strong>หมายเลขโต๊ะ:</strong> {order.table_number}</p>
                  <p><strong>ยอดรวม:</strong> {order.total_amount} บาท</p>
                  <p><strong>สถานะ:</strong> {order.status}</p>
                  <p><strong>สถานะการชำระเงิน:</strong> {order.payment_status}</p>
                  <p><strong>เวลาสั่ง:</strong> {new Date(order.order_time).toLocaleString()}</p>
                  {order.qr_code_url && <p><strong>QR Code URL:</strong> <a href={order.qr_code_url} target="_blank" rel="noopener noreferrer">ดู QR</a></p>}
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {order.updated_at ? new Date(order.updated_at).toLocaleString() : 'N/A'}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบข้อมูล Orders สำหรับร้านนี้ในฐานข้อมูล</p>
            )}
          </div>
        )}

        {/* --- Fetch Single Order --- */}
        {currentDisplay === 'singleOrder' && singleOrder && (
          <div style={itemCardStyle}>
            <h2>รายละเอียด Order ID: {singleOrder.id}</h2>
            <p><strong>ร้านอาหาร ID:</strong> {singleOrder.restaurant_id}</p>
            <p><strong>หมายเลขโต๊ะ:</strong> {singleOrder.table_number}</p>
            <p><strong>ยอดรวม:</strong> {singleOrder.total_amount} บาท</p>
            <p><strong>สถานะ:</strong> {singleOrder.status}</p>
            <p><strong>สถานะการชำระเงิน:</strong> {singleOrder.payment_status}</p>
            <p><strong>เวลาสั่ง:</strong> {new Date(singleOrder.order_time).toLocaleString()}</p>
            {singleOrder.qr_code_url && <p><strong>QR Code URL:</strong> <a href={singleOrder.qr_code_url} target="_blank" rel="noopener noreferrer">ดู QR</a></p>}
            <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {singleOrder.updated_at ? new Date(singleOrder.updated_at).toLocaleString() : 'N/A'}</p>
            
            <h3>รายการสินค้าใน Order นี้:</h3>
            {singleOrder.items && singleOrder.items.length > 0 ? (
              singleOrder.items.map((item, idx) => (
                <div key={idx} style={addedItemStyle}>
                  <p>Menu ID: {item.menu_id}, จำนวน: {item.quantity}, ราคา: {item.price_at_order} {item.notes && `(หมายเหตุ: ${item.notes})`}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบรายการสินค้าสำหรับ Order นี้</p>
            )}
          </div>
        )}

        {/* --- Fetch Order Items for an Order --- */}
        {currentDisplay === 'orderItems' && orderItemsForOrder && (
          <div style={addedItemsListStyle}>
            <h2>รายการสินค้าสำหรับ Order ID: {entityIdToManage}</h2>
            {orderItemsForOrder.length > 0 ? (
              orderItemsForOrder.map((item, idx) => (
                <div key={idx} style={addedItemStyle}>
                  <p>Item ID: {item.id}, Menu ID: {item.menu_id}, จำนวน: {item.quantity}, ราคา: {item.price_at_order} {item.notes && `(หมายเหตุ: ${item.notes})`}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>สร้างเมื่อ: {item.created_at ? new Date(item.created_at).toLocaleString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {item.updated_at ? new Date(item.updated_at).toLocaleString() : 'N/A'}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบรายการสินค้าสำหรับ Order ID นี้</p>
            )}
          </div>
        )}


        {/* --- Create Order Form --- */}
        {currentDisplay === 'createOrder' && (
          <div style={crudFormStyle}>
            <h2>สร้าง Order ใหม่ (ร้าน ID: {selectedRestaurantId})</h2>
            {/* ฟอร์มข้อมูล Order หลัก */}
            <div style={formGroupStyle}>
              <label htmlFor="tableNumber" style={labelStyle}>หมายเลขโต๊ะ:</label>
              <input
                type="number"
                id="tableNumber"
                value={newOrderTableNumber}
                onChange={(e) => setNewOrderTableNumber(e.target.value)}
                style={inputStyle}
              />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="totalAmount" style={labelStyle}>ยอดรวม:</label>
              <input
                type="number"
                id="totalAmount"
                value={newOrderTotalAmount}
                onChange={(e) => setNewOrderTotalAmount(e.target.value)}
                style={inputStyle}
                step="0.01"
              />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="orderStatus" style={labelStyle}>สถานะ Order:</label>
              <select
                id="orderStatus"
                value={newOrderStatus}
                onChange={(e) => setNewOrderStatus(e.target.value)}
                style={inputStyle}
              >
                <option value="Pending">Pending</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
              </select>
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="paymentStatus" style={labelStyle}>สถานะการชำระเงิน:</label>
              <select
                id="paymentStatus"
                value={newOrderPaymentStatus}
                onChange={(e) => setNewOrderPaymentStatus(e.target.value)}
                style={inputStyle}
              >
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
                <option value="Refunded">Refunded</option>
              </select>
            </div>

            {/* ฟอร์มสำหรับเพิ่มรายการสินค้า (Order Items) */}
            <h3 style={{ marginTop: '30px', borderBottom: '1px solid #eee', paddingBottom: '10px' }}>เพิ่มรายการสินค้า</h3>
            <div style={orderItemFormStyle}>
              <div style={formGroupStyle}>
                <label htmlFor="menuItemId" style={labelStyle}>Menu ID:</label>
                <input
                  type="number"
                  id="menuItemId"
                  value={currentMenuItemId}
                  onChange={(e) => setCurrentMenuItemId(e.target.value)}
                  style={inputStyle}
                />
              </div>
              <div style={formGroupStyle}>
                <label htmlFor="quantity" style={labelStyle}>จำนวน:</label>
                <input
                  type="number"
                  id="quantity"
                  value={currentQuantity}
                  onChange={(e) => setCurrentQuantity(e.target.value)}
                  style={inputStyle}
                />
              </div>
              <div style={formGroupStyle}>
                <label htmlFor="priceAtOrder" style={labelStyle}>ราคา ณ เวลาสั่ง:</label>
                <input
                  type="number"
                  id="priceAtOrder"
                  value={currentPriceAtOrder}
                  onChange={(e) => setCurrentPriceAtOrder(e.target.value)}
                  style={inputStyle}
                  step="0.01"
                />
              </div>
              <div style={formGroupStyle}>
                <label htmlFor="notes" style={labelStyle}>หมายเหตุ (ไม่บังคับ):</label>
                <input
                  type="text"
                  id="notes"
                  value={currentNotes}
                  onChange={(e) => setCurrentNotes(e.target.value)}
                  style={inputStyle}
                />
              </div>
              <button onClick={addOrderItem} style={buttonStyle}>
                เพิ่มรายการสินค้า
              </button>
            </div>

            {/* แสดงรายการสินค้าที่เพิ่มแล้ว */}
            {newOrderItems.length > 0 && (
              <div style={addedItemsListStyle}>
                <h3>รายการสินค้าใน Order นี้:</h3>
                {newOrderItems.map((item, index) => (
                  <div key={index} style={addedItemStyle}>
                    <p>Menu ID: {item.menu_id}, จำนวน: {item.quantity}, ราคา: {item.price_at_order} {item.notes && `(หมายเหตุ: ${item.notes})`}</p>
                  </div>
                ))}
              </div>
            )}

            {/* ปุ่มบันทึก Order หลัก */}
            <button onClick={createOrder} disabled={loading || selectedRestaurantId === null || isNaN(selectedRestaurantId) || newOrderItems.length === 0} style={buttonStyle}>
              {loading ? 'กำลังสร้าง Order...' : 'บันทึก Order'}
            </button>
            {createOrderMessage && <p style={successMessageStyle}>{createOrderMessage}</p>}
          </div>
        )}

        {/* --- Update/Delete Orders Section --- */}
        {currentDisplay === 'updateDeleteOrders' && (
          <div style={crudFormStyle}>
            <h2>อัปเดต / ลบ Order</h2>
            <div style={formGroupStyle}>
              <label htmlFor="orderIdManage" style={labelStyle}>Order ID:</label>
              <input type="number" id="orderIdManage" value={entityIdToManage} onChange={(e) => setEntityIdToManage(e.target.value)} style={inputStyle} />
            </div>
            <div style={buttonContainerStyle}>
              <button onClick={fetchSingleOrder} disabled={loading || !entityIdToManage} style={buttonStyle}>
                ดูรายละเอียด Order
              </button>
              <button onClick={fetchOrderItems} disabled={loading || !entityIdToManage} style={buttonStyle}>
                ดูรายการ Order Items
              </button>
            </div>
            <div style={{ ...formGroupStyle, marginTop: '20px' }}>
              <button onClick={loadOrderForEdit} disabled={loading || !entityIdToManage} style={buttonStyle}>
                โหลดข้อมูลสำหรับแก้ไข
              </button>
              {/* NEW: Button to generate PromptPay QR */}
              <button onClick={handleGeneratePromptPayQr} disabled={loading || !singleOrder || !singleOrder.total_amount} style={buttonStyle}>
                สร้าง QR Code PromptPay
              </button>
            </div>

            {/* NEW: Display Generated QR Code */}
            {generatedQrCodeUrl && (
              <div style={{ marginTop: '20px', textAlign: 'center' }}>
                <h3>QR Code PromptPay สำหรับ Order ID: {singleOrder?.id}</h3>
                <p>ยอดเงิน: {singleOrder?.total_amount} บาท</p>
                <img
                  src={generatedQrCodeUrl}
                  alt="PromptPay QR Code"
                  style={{ maxWidth: '250px', height: 'auto', border: '1px solid #ddd', borderRadius: '8px', padding: '10px', backgroundColor: '#fff' }}
                />
                <p style={{ fontSize: '0.9em', color: '#555', marginTop: '10px' }}>
                  (QR Code นี้ถูกสร้างโดยบริการ promptpay.io โดยใช้เบอร์โทรศัพท์จำลอง: 0812345678)
                </p>
              </div>
            )}

            {/* NEW: Specific Input Fields for Order Update */}
            <h3 style={{ marginTop: '20px', borderBottom: '1px solid #eee', paddingBottom: '10px' }}>แก้ไขข้อมูล Order</h3>
            <div style={formGroupStyle}>
              <label htmlFor="editOrderTableNumber" style={labelStyle}>หมายเลขโต๊ะ:</label>
              <input type="number" id="editOrderTableNumber" value={editOrderTableNumber} onChange={(e) => setEditOrderTableNumber(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editOrderTotalAmount" style={labelStyle}>ยอดรวม:</label>
              <input type="number" id="editOrderTotalAmount" value={editOrderTotalAmount} onChange={(e) => setEditOrderTotalAmount(e.target.value)} style={inputStyle} step="0.01" />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editOrderStatus" style={labelStyle}>สถานะ Order:</label>
              <select id="editOrderStatus" value={editOrderStatus} onChange={(e) => setEditOrderStatus(e.target.value)} style={inputStyle}>
                <option value="Pending">Pending</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
                <option value="Processing">Processing</option>
              </select>
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editOrderPaymentStatus" style={labelStyle}>สถานะการชำระเงิน:</label>
              <select id="editOrderPaymentStatus" value={editOrderPaymentStatus} onChange={(e) => setEditOrderPaymentStatus(e.target.value)} style={inputStyle}>
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
                <option value="Refunded">Refunded</option>
              </select>
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editOrderQrCodeUrl" style={labelStyle}>QR Code URL (ไม่บังคับ):</label>
              <input type="text" id="editOrderQrCodeUrl" value={editOrderQrCodeUrl || ''} onChange={(e) => setEditOrderQrCodeUrl(e.target.value)} style={inputStyle} />
            </div>
            
            <div style={buttonContainerStyle}>
              <button onClick={updateOrder} disabled={loading || !entityIdToManage} style={buttonStyle}>
                อัปเดต Order
              </button>
              <button onClick={deleteOrder} disabled={loading || !entityIdToManage} style={{ ...buttonStyle, backgroundColor: '#dc3545' }}>
                ลบ Order
              </button>
            </div>
          </div>
        )}


        {/* --- Display Employees --- */}
        {currentDisplay === 'employees' && employees && (
          <div style={dataDisplayGridStyle}>
            <h2>ข้อมูลพนักงาน (ร้าน ID: {selectedRestaurantId})</h2>
            {employees.length > 0 ? (
              employees.map((employee: Employee) => (
                <div key={employee.id} style={itemCardStyle}>
                  <h3>{employee.full_name} (ID: {employee.id})</h3>
                  <p><strong>ร้านอาหาร ID:</strong> {employee.restaurant_id}</p>
                  <p><strong>ตำแหน่ง:</strong> {employee.position}</p>
                  <p><strong>เบอร์โทรศัพท์:</strong> {employee.phone_number || 'N/A'}</p>
                  <p><strong>เงินเดือน:</strong> {employee.salary} บาท</p>
                  <p><strong>วันที่จ้าง:</strong> {employee.hire_date ? new Date(employee.hire_date).toLocaleDateString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>สร้างเมื่อ: {employee.created_at ? new Date(employee.created_at).toLocaleString() : 'N/A'}</p>
                  <p style={{ fontSize: '0.8em', color: '#666' }}>อัปเดตเมื่อ: {employee.updated_at ? new Date(employee.updated_at).toLocaleString() : 'N/A'}</p>
                </div>
              ))
            ) : (
              <p>ไม่พบข้อมูลพนักงานสำหรับร้านนี้ในฐานข้อมูล</p>
            )}
          </div>
        )}

        {/* --- Create Employee Form --- */}
        {currentDisplay === 'createEmployee' && (
          <div style={crudFormStyle}>
            <h2>สร้าง Employee ใหม่ (ร้าน ID: {selectedRestaurantId})</h2>
            <div style={formGroupStyle}>
              <label htmlFor="newEmployeeFullName" style={labelStyle}>ชื่อ-นามสกุล:</label>
              <input type="text" id="newEmployeeFullName" value={newEmployeeFullName} onChange={(e) => setNewEmployeeFullName(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newEmployeePosition" style={labelStyle}>ตำแหน่ง:</label>
              <input type="text" id="newEmployeePosition" value={newEmployeePosition} onChange={(e) => setNewEmployeePosition(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newEmployeePhoneNumber" style={labelStyle}>เบอร์โทรศัพท์ (ไม่บังคับ):</label>
              <input type="text" id="newEmployeePhoneNumber" value={newEmployeePhoneNumber} onChange={(e) => setNewEmployeePhoneNumber(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newEmployeeSalary" style={labelStyle}>เงินเดือน:</label>
              <input type="number" id="newEmployeeSalary" value={newEmployeeSalary} onChange={(e) => setNewEmployeeSalary(e.target.value)} style={inputStyle} step="0.01" />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="newEmployeeHireDate" style={labelStyle}>วันที่จ้าง:</label>
              <input type="date" id="newEmployeeHireDate" value={newEmployeeHireDate} onChange={(e) => setNewEmployeeHireDate(e.target.value)} style={inputStyle} />
            </div>
            <button onClick={createEmployee} disabled={loading} style={buttonStyle}>
              {loading ? 'กำลังสร้างพนักงาน...' : 'บันทึกพนักงานใหม่'}
            </button>
            {createEmployeeMessage && <p style={successMessageStyle}>{createEmployeeMessage}</p>}
          </div>
        )}

        {/* --- Update/Delete Employees Section --- */}
        {currentDisplay === 'updateDeleteEmployees' && (
          <div style={crudFormStyle}>
            <h2>อัปเดต / ลบ Employee</h2>
            <div style={formGroupStyle}>
              <label htmlFor="employeeIdUpdateDelete" style={labelStyle}>Employee ID:</label>
              <input type="number" id="employeeIdUpdateDelete" value={entityIdToManage} onChange={(e) => setEntityIdToManage(e.target.value)} style={inputStyle} />
            </div>
            <div style={buttonContainerStyle}>
              <button onClick={loadEmployeeForEdit} disabled={loading || !entityIdToManage} style={buttonStyle}>
                โหลดข้อมูลสำหรับแก้ไข
              </button>
            </div>
            
            {/* NEW: Specific Input Fields for Employee Update */}
            <h3 style={{ marginTop: '20px', borderBottom: '1px solid #eee', paddingBottom: '10px' }}>แก้ไขข้อมูลพนักงาน</h3>
            <div style={formGroupStyle}>
              <label htmlFor="editEmployeeFullName" style={labelStyle}>ชื่อ-นามสกุล:</label>
              <input type="text" id="editEmployeeFullName" value={editEmployeeFullName} onChange={(e) => setEditEmployeeFullName(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editEmployeePosition" style={labelStyle}>ตำแหน่ง:</label>
              <input type="text" id="editEmployeePosition" value={editEmployeePosition} onChange={(e) => setEditEmployeePosition(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editEmployeePhoneNumber" style={labelStyle}>เบอร์โทรศัพท์ (ไม่บังคับ):</label>
              <input type="text" id="editEmployeePhoneNumber" value={editEmployeePhoneNumber} onChange={(e) => setEditEmployeePhoneNumber(e.target.value)} style={inputStyle} />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editEmployeeSalary" style={labelStyle}>เงินเดือน:</label>
              <input type="number" id="editEmployeeSalary" value={editEmployeeSalary} onChange={(e) => setEditEmployeeSalary(e.target.value)} style={inputStyle} step="0.01" />
            </div>
            <div style={formGroupStyle}>
              <label htmlFor="editEmployeeHireDate" style={labelStyle}>วันที่จ้าง:</label>
              <input type="date" id="editEmployeeHireDate" value={editEmployeeHireDate} onChange={(e) => setEditEmployeeHireDate(e.target.value)} style={inputStyle} />
            </div>

            <div style={buttonContainerStyle}>
              <button onClick={updateEmployee} disabled={loading || !entityIdToManage} style={buttonStyle}>
                อัปเดต Employee
              </button>
              <button onClick={deleteEmployee} disabled={loading || !entityIdToManage} style={{ ...buttonStyle, backgroundColor: '#dc3545' }}>
                ลบ Employee
              </button>
            </div>
          </div>
        )}


        {/* --- General Test API Display --- */}
        {currentDisplay === 'testApi' && testApiMessage && (
          <div style={testApiMessageStyle}>
            <h2>ผลลัพธ์จากการทดสอบ API ทั่วไป</h2>
            <p>{testApiMessage}</p>
          </div>
        )}
      </div>
    </div>
  );
}

// --- Basic Inline Styles (for quick styling) ---
const appContainerStyle: React.CSSProperties = {
  fontFamily: 'Arial, sans-serif',
  textAlign: 'center',
  padding: '20px',
  backgroundColor: '#f4f7f6',
  minHeight: '100vh',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  color: '#333',
};

const headerStyle: React.CSSProperties = {
  marginBottom: '30px',
  backgroundColor: '#ffffff',
  padding: '20px 40px',
  borderRadius: '10px',
  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
};

const inputContainerStyle: React.CSSProperties = {
  marginBottom: '20px',
  textAlign: 'center',
  padding: '15px',
  backgroundColor: '#e6f7ff',
  borderRadius: '8px',
  border: '1px solid #91d5ff',
  width: '100%',
  maxWidth: '400px',
  boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
};

const buttonContainerStyle: React.CSSProperties = {
  marginBottom: '30px',
  display: 'flex',
  gap: '15px',
  flexWrap: 'wrap',
  justifyContent: 'center',
};

const buttonStyle: React.CSSProperties = {
  padding: '12px 25px',
  fontSize: '16px',
  fontWeight: 'bold',
  color: '#fff',
  backgroundColor: '#007bff',
  border: 'none',
  borderRadius: '8px',
  cursor: 'pointer',
  transition: 'background-color 0.3s ease, transform 0.2s ease',
  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
  flexShrink: 0, // Prevent buttons from shrinking too much
};

const resultsContainerStyle: React.CSSProperties = {
  width: '100%',
  maxWidth: '900px',
  backgroundColor: '#ffffff',
  padding: '30px',
  borderRadius: '10px',
  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
  marginTop: '20px',
};

const dataDisplayGridStyle: React.CSSProperties = {
  display: 'grid',
  gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
  gap: '20px',
  marginTop: '20px',
  justifyContent: 'center',
};

const itemCardStyle: React.CSSProperties = {
  border: '1px solid #e0e0e0',
  borderRadius: '10px',
  padding: '20px',
  textAlign: 'left',
  backgroundColor: '#fafafa',
  boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'space-between',
};

const testApiMessageStyle: React.CSSProperties = {
  backgroundColor: '#e9f7ef',
  border: '1px solid #28a745',
  borderRadius: '8px',
  padding: '20px',
  color: '#28a745',
  fontWeight: 'bold',
};

// Styles for CRUD Forms (shared)
const crudFormStyle: React.CSSProperties = {
  backgroundColor: '#f8f9fa',
  border: '1px solid #e9ecef',
  borderRadius: '10px',
  padding: '30px',
  marginTop: '20px',
  textAlign: 'left',
  maxWidth: '500px',
  margin: '20px auto',
  boxShadow: '0 2px 5px rgba(0,0,0,0.05)',
};

const formGroupStyle: React.CSSProperties = {
  marginBottom: '15px',
};

const labelStyle: React.CSSProperties = {
  display: 'block',
  marginBottom: '5px',
  fontWeight: 'bold',
  color: '#555',
};

const inputStyle: React.CSSProperties = {
  width: '100%',
  padding: '10px',
  border: '1px solid #ced4da',
  borderRadius: '5px',
  boxSizing: 'border-box', // Include padding in element's total width and height
};

const successMessageStyle: React.CSSProperties = {
  marginTop: '20px',
  padding: '10px 15px',
  backgroundColor: '#d4edda',
  color: '#155724',
  border: '1px solid #28a745',
  borderRadius: '5px',
  textAlign: 'center',
};

// Styles for Order Item Form
const orderItemFormStyle: React.CSSProperties = {
  backgroundColor: '#e9f7ef',
  border: '1px dashed #28a745',
  borderRadius: '8px',
  padding: '20px',
  marginBottom: '20px',
};

const addedItemsListStyle: React.CSSProperties = {
  marginTop: '20px',
  padding: '15px',
  border: '1px solid #cce5ff',
  borderRadius: '8px',
  backgroundColor: '#e0f2ff',
};

const addedItemStyle: React.CSSProperties = {
  backgroundColor: '#ffffff',
  padding: '10px',
  borderRadius: '5px',
  marginBottom: '8px',
  boxShadow: '0 1px 3px rgba(0,0,0,0.08)',
};

export default App;
